// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/k8s/finalizer.go

// Package k8s is a generated GoMock package.
package k8s

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockFinalizerManager is a mock of FinalizerManager interface.
type MockFinalizerManager struct {
	ctrl     *gomock.Controller
	recorder *MockFinalizerManagerMockRecorder
}

// MockFinalizerManagerMockRecorder is the mock recorder for MockFinalizerManager.
type MockFinalizerManagerMockRecorder struct {
	mock *MockFinalizerManager
}

// NewMockFinalizerManager creates a new mock instance.
func NewMockFinalizerManager(ctrl *gomock.Controller) *MockFinalizerManager {
	mock := &MockFinalizerManager{ctrl: ctrl}
	mock.recorder = &MockFinalizerManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFinalizerManager) EXPECT() *MockFinalizerManagerMockRecorder {
	return m.recorder
}

// AddFinalizers mocks base method.
func (m *MockFinalizerManager) AddFinalizers(ctx context.Context, object client.Object, finalizers ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, object}
	for _, a := range finalizers {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddFinalizers", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddFinalizers indicates an expected call of AddFinalizers.
func (mr *MockFinalizerManagerMockRecorder) AddFinalizers(ctx, object interface{}, finalizers ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, object}, finalizers...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFinalizers", reflect.TypeOf((*MockFinalizerManager)(nil).AddFinalizers), varargs...)
}

// RemoveFinalizers mocks base method.
func (m *MockFinalizerManager) RemoveFinalizers(ctx context.Context, object client.Object, finalizers ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, object}
	for _, a := range finalizers {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveFinalizers", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveFinalizers indicates an expected call of RemoveFinalizers.
func (mr *MockFinalizerManagerMockRecorder) RemoveFinalizers(ctx, object interface{}, finalizers ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, object}, finalizers...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFinalizers", reflect.TypeOf((*MockFinalizerManager)(nil).RemoveFinalizers), varargs...)
}
