// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-application-networking-k8s/pkg/aws (interfaces: Cloud)

// Package aws is a generated GoMock package.
package aws

import (
	context "context"
	reflect "reflect"

	services "github.com/aws/aws-application-networking-k8s/pkg/aws/services"
	gomock "github.com/golang/mock/gomock"
)

// MockCloud is a mock of Cloud interface.
type MockCloud struct {
	ctrl     *gomock.Controller
	recorder *MockCloudMockRecorder
}

// MockCloudMockRecorder is the mock recorder for MockCloud.
type MockCloudMockRecorder struct {
	mock *MockCloud
}

// NewMockCloud creates a new mock instance.
func NewMockCloud(ctrl *gomock.Controller) *MockCloud {
	mock := &MockCloud{ctrl: ctrl}
	mock.recorder = &MockCloudMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloud) EXPECT() *MockCloudMockRecorder {
	return m.recorder
}

// Config mocks base method.
func (m *MockCloud) Config() CloudConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Config")
	ret0, _ := ret[0].(CloudConfig)
	return ret0
}

// Config indicates an expected call of Config.
func (mr *MockCloudMockRecorder) Config() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Config", reflect.TypeOf((*MockCloud)(nil).Config))
}

// DefaultTags mocks base method.
func (m *MockCloud) DefaultTags() map[string]*string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DefaultTags")
	ret0, _ := ret[0].(map[string]*string)
	return ret0
}

// DefaultTags indicates an expected call of DefaultTags.
func (mr *MockCloudMockRecorder) DefaultTags() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DefaultTags", reflect.TypeOf((*MockCloud)(nil).DefaultTags))
}

// DefaultTagsMergedWith mocks base method.
func (m *MockCloud) DefaultTagsMergedWith(arg0 map[string]*string) map[string]*string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DefaultTagsMergedWith", arg0)
	ret0, _ := ret[0].(map[string]*string)
	return ret0
}

// DefaultTagsMergedWith indicates an expected call of DefaultTagsMergedWith.
func (mr *MockCloudMockRecorder) DefaultTagsMergedWith(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DefaultTagsMergedWith", reflect.TypeOf((*MockCloud)(nil).DefaultTagsMergedWith), arg0)
}

// IsArnManaged mocks base method.
func (m *MockCloud) IsArnManaged(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsArnManaged", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsArnManaged indicates an expected call of IsArnManaged.
func (mr *MockCloudMockRecorder) IsArnManaged(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsArnManaged", reflect.TypeOf((*MockCloud)(nil).IsArnManaged), arg0, arg1)
}

// Lattice mocks base method.
func (m *MockCloud) Lattice() services.Lattice {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Lattice")
	ret0, _ := ret[0].(services.Lattice)
	return ret0
}

// Lattice indicates an expected call of Lattice.
func (mr *MockCloudMockRecorder) Lattice() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lattice", reflect.TypeOf((*MockCloud)(nil).Lattice))
}

// Tagging mocks base method.
func (m *MockCloud) Tagging() services.Tagging {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tagging")
	ret0, _ := ret[0].(services.Tagging)
	return ret0
}

// Tagging indicates an expected call of Tagging.
func (mr *MockCloudMockRecorder) Tagging() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tagging", reflect.TypeOf((*MockCloud)(nil).Tagging))
}

// TryOwn mocks base method.
func (m *MockCloud) TryOwn(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TryOwn", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TryOwn indicates an expected call of TryOwn.
func (mr *MockCloudMockRecorder) TryOwn(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TryOwn", reflect.TypeOf((*MockCloud)(nil).TryOwn), arg0, arg1)
}

// TryOwnFromTags mocks base method.
func (m *MockCloud) TryOwnFromTags(arg0 context.Context, arg1 string, arg2 map[string]*string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TryOwnFromTags", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TryOwnFromTags indicates an expected call of TryOwnFromTags.
func (mr *MockCloudMockRecorder) TryOwnFromTags(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TryOwnFromTags", reflect.TypeOf((*MockCloud)(nil).TryOwnFromTags), arg0, arg1, arg2)
}
