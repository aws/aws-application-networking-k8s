// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/aws/cloud.go

// Package aws is a generated GoMock package.
package aws

import (
	reflect "reflect"

	services "github.com/aws/aws-application-networking-k8s/pkg/aws/services"
	gomock "github.com/golang/mock/gomock"
)

// MockCloud is a mock of Cloud interface.
type MockCloud struct {
	ctrl     *gomock.Controller
	recorder *MockCloudMockRecorder
}

// MockCloudMockRecorder is the mock recorder for MockCloud.
type MockCloudMockRecorder struct {
	mock *MockCloud
}

// NewMockCloud creates a new mock instance.
func NewMockCloud(ctrl *gomock.Controller) *MockCloud {
	mock := &MockCloud{ctrl: ctrl}
	mock.recorder = &MockCloudMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloud) EXPECT() *MockCloudMockRecorder {
	return m.recorder
}

// EKS mocks base method.
func (m *MockCloud) EKS() services.EKS {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EKS")
	ret0, _ := ret[0].(services.EKS)
	return ret0
}

// EKS indicates an expected call of EKS.
func (mr *MockCloudMockRecorder) EKS() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EKS", reflect.TypeOf((*MockCloud)(nil).EKS))
}

// GetAccountID mocks base method.
func (m *MockCloud) GetAccountID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetAccountID indicates an expected call of GetAccountID.
func (mr *MockCloudMockRecorder) GetAccountID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountID", reflect.TypeOf((*MockCloud)(nil).GetAccountID))
}

// GetServiceNetworkName mocks base method.
func (m *MockCloud) GetServiceNetworkName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceNetworkName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetServiceNetworkName indicates an expected call of GetServiceNetworkName.
func (mr *MockCloudMockRecorder) GetServiceNetworkName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceNetworkName", reflect.TypeOf((*MockCloud)(nil).GetServiceNetworkName))
}

// GetVpcID mocks base method.
func (m *MockCloud) GetVpcID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVpcID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetVpcID indicates an expected call of GetVpcID.
func (mr *MockCloudMockRecorder) GetVpcID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVpcID", reflect.TypeOf((*MockCloud)(nil).GetVpcID))
}

// Lattice mocks base method.
func (m *MockCloud) Lattice() services.Lattice {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Lattice")
	ret0, _ := ret[0].(services.Lattice)
	return ret0
}

// Lattice indicates an expected call of Lattice.
func (mr *MockCloudMockRecorder) Lattice() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lattice", reflect.TypeOf((*MockCloud)(nil).Lattice))
}

// SetVpcID mocks base method.
func (m *MockCloud) SetVpcID(vpcID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetVpcID", vpcID)
}

// SetVpcID indicates an expected call of SetVpcID.
func (mr *MockCloudMockRecorder) SetVpcID(vpcID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetVpcID", reflect.TypeOf((*MockCloud)(nil).SetVpcID), vpcID)
}

// UseLongTGName mocks base method.
func (m *MockCloud) UseLongTGName() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UseLongTGName")
	ret0, _ := ret[0].(bool)
	return ret0
}

// UseLongTGName indicates an expected call of UseLongTGName.
func (mr *MockCloudMockRecorder) UseLongTGName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UseLongTGName", reflect.TypeOf((*MockCloud)(nil).UseLongTGName))
}
