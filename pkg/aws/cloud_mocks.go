// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/aws/cloud.go

// Package aws is a generated GoMock package.
package aws

import (
	context "context"
	reflect "reflect"

	services "github.com/aws/aws-application-networking-k8s/pkg/aws/services"
	gomock "github.com/golang/mock/gomock"
)

// MockCloud is a mock of Cloud interface.
type MockCloud struct {
	ctrl     *gomock.Controller
	recorder *MockCloudMockRecorder
}

// MockCloudMockRecorder is the mock recorder for MockCloud.
type MockCloudMockRecorder struct {
	mock *MockCloud
}

// NewMockCloud creates a new mock instance.
func NewMockCloud(ctrl *gomock.Controller) *MockCloud {
	mock := &MockCloud{ctrl: ctrl}
	mock.recorder = &MockCloudMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloud) EXPECT() *MockCloudMockRecorder {
	return m.recorder
}

// CheckAndAcquireOwnershipFromTags mocks base method.
func (m *MockCloud) CheckAndAcquireOwnershipFromTags(ctx context.Context, arn string, tags services.Tags) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckAndAcquireOwnershipFromTags", ctx, arn, tags)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckAndAcquireOwnershipFromTags indicates an expected call of CheckAndAcquireOwnershipFromTags.
func (mr *MockCloudMockRecorder) CheckAndAcquireOwnershipFromTags(ctx, arn, tags interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckAndAcquireOwnershipFromTags", reflect.TypeOf((*MockCloud)(nil).CheckAndAcquireOwnershipFromTags), ctx, arn, tags)
}

// Config mocks base method.
func (m *MockCloud) Config() CloudConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Config")
	ret0, _ := ret[0].(CloudConfig)
	return ret0
}

// Config indicates an expected call of Config.
func (mr *MockCloudMockRecorder) Config() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Config", reflect.TypeOf((*MockCloud)(nil).Config))
}

// ContainsManagedBy mocks base method.
func (m *MockCloud) ContainsManagedBy(tags services.Tags) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainsManagedBy", tags)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ContainsManagedBy indicates an expected call of ContainsManagedBy.
func (mr *MockCloudMockRecorder) ContainsManagedBy(tags interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainsManagedBy", reflect.TypeOf((*MockCloud)(nil).ContainsManagedBy), tags)
}

// DefaultTags mocks base method.
func (m *MockCloud) DefaultTags() services.Tags {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DefaultTags")
	ret0, _ := ret[0].(services.Tags)
	return ret0
}

// DefaultTags indicates an expected call of DefaultTags.
func (mr *MockCloudMockRecorder) DefaultTags() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DefaultTags", reflect.TypeOf((*MockCloud)(nil).DefaultTags))
}

// DefaultTagsMergedWith mocks base method.
func (m *MockCloud) DefaultTagsMergedWith(arg0 services.Tags) services.Tags {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DefaultTagsMergedWith", arg0)
	ret0, _ := ret[0].(services.Tags)
	return ret0
}

// DefaultTagsMergedWith indicates an expected call of DefaultTagsMergedWith.
func (mr *MockCloudMockRecorder) DefaultTagsMergedWith(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DefaultTagsMergedWith", reflect.TypeOf((*MockCloud)(nil).DefaultTagsMergedWith), arg0)
}

// GetManagedBy mocks base method.
func (m *MockCloud) GetManagedBy(ctx context.Context, arn string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetManagedBy", ctx, arn)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetManagedBy indicates an expected call of GetManagedBy.
func (mr *MockCloudMockRecorder) GetManagedBy(ctx, arn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetManagedBy", reflect.TypeOf((*MockCloud)(nil).GetManagedBy), ctx, arn)
}

// IsArnManaged mocks base method.
func (m *MockCloud) IsArnManaged(ctx context.Context, arn string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsArnManaged", ctx, arn)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsArnManaged indicates an expected call of IsArnManaged.
func (mr *MockCloudMockRecorder) IsArnManaged(ctx, arn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsArnManaged", reflect.TypeOf((*MockCloud)(nil).IsArnManaged), ctx, arn)
}

// Lattice mocks base method.
func (m *MockCloud) Lattice() services.Lattice {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Lattice")
	ret0, _ := ret[0].(services.Lattice)
	return ret0
}

// Lattice indicates an expected call of Lattice.
func (mr *MockCloudMockRecorder) Lattice() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lattice", reflect.TypeOf((*MockCloud)(nil).Lattice))
}
