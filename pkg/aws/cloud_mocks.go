// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aws/aws-application-networking-k8s/pkg/aws (interfaces: Cloud)

// Package aws is a generated GoMock package.
package aws

import (
	reflect "reflect"

	services "github.com/aws/aws-application-networking-k8s/pkg/aws/services"
	gomock "github.com/golang/mock/gomock"
)

// MockCloud is a mock of Cloud interface.
type MockCloud struct {
	ctrl     *gomock.Controller
	recorder *MockCloudMockRecorder
}

// MockCloudMockRecorder is the mock recorder for MockCloud.
type MockCloudMockRecorder struct {
	mock *MockCloud
}

// NewMockCloud creates a new mock instance.
func NewMockCloud(ctrl *gomock.Controller) *MockCloud {
	mock := &MockCloud{ctrl: ctrl}
	mock.recorder = &MockCloudMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloud) EXPECT() *MockCloudMockRecorder {
	return m.recorder
}

// Config mocks base method.
func (m *MockCloud) Config() CloudConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Config")
	ret0, _ := ret[0].(CloudConfig)
	return ret0
}

// Config indicates an expected call of Config.
func (mr *MockCloudMockRecorder) Config() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Config", reflect.TypeOf((*MockCloud)(nil).Config))
}

// DefaultTags mocks base method.
func (m *MockCloud) DefaultTags() map[string]*string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DefaultTags")
	ret0, _ := ret[0].(map[string]*string)
	return ret0
}

// DefaultTags indicates an expected call of DefaultTags.
func (mr *MockCloudMockRecorder) DefaultTags() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DefaultTags", reflect.TypeOf((*MockCloud)(nil).DefaultTags))
}

// IsArnManaged mocks base method.
func (m *MockCloud) IsArnManaged(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsArnManaged", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsArnManaged indicates an expected call of IsArnManaged.
func (mr *MockCloudMockRecorder) IsArnManaged(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsArnManaged", reflect.TypeOf((*MockCloud)(nil).IsArnManaged), arg0)
}

// IsManagedByTagSet mocks base method.
func (m *MockCloud) IsManagedByTagSet(arg0 map[string]*string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsManagedByTagSet", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsManagedByTagSet indicates an expected call of IsManagedByTagSet.
func (mr *MockCloudMockRecorder) IsManagedByTagSet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsManagedByTagSet", reflect.TypeOf((*MockCloud)(nil).IsManagedByTagSet), arg0)
}

// Lattice mocks base method.
func (m *MockCloud) Lattice() services.Lattice {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Lattice")
	ret0, _ := ret[0].(services.Lattice)
	return ret0
}

// Lattice indicates an expected call of Lattice.
func (mr *MockCloudMockRecorder) Lattice() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lattice", reflect.TypeOf((*MockCloud)(nil).Lattice))
}
