// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/deploy/lattice/rule_manager.go

// Package lattice is a generated GoMock package.
package lattice

import (
	context "context"
	reflect "reflect"

	aws "github.com/aws/aws-application-networking-k8s/pkg/aws"
	lattice "github.com/aws/aws-application-networking-k8s/pkg/model/lattice"
	vpclattice "github.com/aws/aws-sdk-go/service/vpclattice"
	gomock "github.com/golang/mock/gomock"
)

// MockRuleManager is a mock of RuleManager interface.
type MockRuleManager struct {
	ctrl     *gomock.Controller
	recorder *MockRuleManagerMockRecorder
}

// MockRuleManagerMockRecorder is the mock recorder for MockRuleManager.
type MockRuleManagerMockRecorder struct {
	mock *MockRuleManager
}

// NewMockRuleManager creates a new mock instance.
func NewMockRuleManager(ctrl *gomock.Controller) *MockRuleManager {
	mock := &MockRuleManager{ctrl: ctrl}
	mock.recorder = &MockRuleManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRuleManager) EXPECT() *MockRuleManagerMockRecorder {
	return m.recorder
}

// Cloud mocks base method.
func (m *MockRuleManager) Cloud() aws.Cloud {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cloud")
	ret0, _ := ret[0].(aws.Cloud)
	return ret0
}

// Cloud indicates an expected call of Cloud.
func (mr *MockRuleManagerMockRecorder) Cloud() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cloud", reflect.TypeOf((*MockRuleManager)(nil).Cloud))
}

// Create mocks base method.
func (m *MockRuleManager) Create(ctx context.Context, rule *lattice.Rule) (lattice.RuleStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, rule)
	ret0, _ := ret[0].(lattice.RuleStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockRuleManagerMockRecorder) Create(ctx, rule interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRuleManager)(nil).Create), ctx, rule)
}

// Delete mocks base method.
func (m *MockRuleManager) Delete(ctx context.Context, ruleID, listenerID, serviceID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, ruleID, listenerID, serviceID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRuleManagerMockRecorder) Delete(ctx, ruleID, listenerID, serviceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRuleManager)(nil).Delete), ctx, ruleID, listenerID, serviceID)
}

// Get mocks base method.
func (m *MockRuleManager) Get(ctx context.Context, serviceID, listernID, ruleID string) (*vpclattice.GetRuleOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, serviceID, listernID, ruleID)
	ret0, _ := ret[0].(*vpclattice.GetRuleOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRuleManagerMockRecorder) Get(ctx, serviceID, listernID, ruleID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRuleManager)(nil).Get), ctx, serviceID, listernID, ruleID)
}

// List mocks base method.
func (m *MockRuleManager) List(ctx context.Context, serviceID, listenerID string) ([]*lattice.RuleStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, serviceID, listenerID)
	ret0, _ := ret[0].([]*lattice.RuleStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockRuleManagerMockRecorder) List(ctx, serviceID, listenerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockRuleManager)(nil).List), ctx, serviceID, listenerID)
}

// Update mocks base method.
func (m *MockRuleManager) Update(ctx context.Context, rules []*lattice.Rule) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, rules)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockRuleManagerMockRecorder) Update(ctx, rules interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRuleManager)(nil).Update), ctx, rules)
}
