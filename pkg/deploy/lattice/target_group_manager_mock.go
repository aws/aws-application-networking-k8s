// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/deploy/lattice/target_group_manager.go

// Package lattice is a generated GoMock package.
package lattice

import (
	context "context"
	reflect "reflect"

	lattice "github.com/aws/aws-application-networking-k8s/pkg/model/lattice"
	vpclattice "github.com/aws/aws-sdk-go/service/vpclattice"
	gomock "github.com/golang/mock/gomock"
)

// MockTargetGroupManager is a mock of TargetGroupManager interface.
type MockTargetGroupManager struct {
	ctrl     *gomock.Controller
	recorder *MockTargetGroupManagerMockRecorder
}

// MockTargetGroupManagerMockRecorder is the mock recorder for MockTargetGroupManager.
type MockTargetGroupManagerMockRecorder struct {
	mock *MockTargetGroupManager
}

// NewMockTargetGroupManager creates a new mock instance.
func NewMockTargetGroupManager(ctrl *gomock.Controller) *MockTargetGroupManager {
	mock := &MockTargetGroupManager{ctrl: ctrl}
	mock.recorder = &MockTargetGroupManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTargetGroupManager) EXPECT() *MockTargetGroupManagerMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockTargetGroupManager) Delete(ctx context.Context, modelTg *lattice.TargetGroup) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, modelTg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockTargetGroupManagerMockRecorder) Delete(ctx, modelTg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTargetGroupManager)(nil).Delete), ctx, modelTg)
}

// IsTargetGroupMatch mocks base method.
func (m *MockTargetGroupManager) IsTargetGroupMatch(ctx context.Context, modelTg *lattice.TargetGroup, latticeTg *vpclattice.TargetGroupSummary, latticeTags *lattice.TargetGroupTagFields) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsTargetGroupMatch", ctx, modelTg, latticeTg, latticeTags)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsTargetGroupMatch indicates an expected call of IsTargetGroupMatch.
func (mr *MockTargetGroupManagerMockRecorder) IsTargetGroupMatch(ctx, modelTg, latticeTg, latticeTags interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsTargetGroupMatch", reflect.TypeOf((*MockTargetGroupManager)(nil).IsTargetGroupMatch), ctx, modelTg, latticeTg, latticeTags)
}

// List mocks base method.
func (m *MockTargetGroupManager) List(ctx context.Context) ([]tgListOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].([]tgListOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockTargetGroupManagerMockRecorder) List(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockTargetGroupManager)(nil).List), ctx)
}

// Upsert mocks base method.
func (m *MockTargetGroupManager) Upsert(ctx context.Context, modelTg *lattice.TargetGroup) (lattice.TargetGroupStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", ctx, modelTg)
	ret0, _ := ret[0].(lattice.TargetGroupStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Upsert indicates an expected call of Upsert.
func (mr *MockTargetGroupManagerMockRecorder) Upsert(ctx, modelTg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockTargetGroupManager)(nil).Upsert), ctx, modelTg)
}
