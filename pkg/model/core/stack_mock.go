// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/model/core/stack.go

// Package core is a generated GoMock package.
package core

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockStack is a mock of Stack interface.
type MockStack struct {
	ctrl     *gomock.Controller
	recorder *MockStackMockRecorder
}

// MockStackMockRecorder is the mock recorder for MockStack.
type MockStackMockRecorder struct {
	mock *MockStack
}

// NewMockStack creates a new mock instance.
func NewMockStack(ctrl *gomock.Controller) *MockStack {
	mock := &MockStack{ctrl: ctrl}
	mock.recorder = &MockStackMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStack) EXPECT() *MockStackMockRecorder {
	return m.recorder
}

// AddDependency mocks base method.
func (m *MockStack) AddDependency(dependee, depender Resource) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddDependency", dependee, depender)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddDependency indicates an expected call of AddDependency.
func (mr *MockStackMockRecorder) AddDependency(dependee, depender interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDependency", reflect.TypeOf((*MockStack)(nil).AddDependency), dependee, depender)
}

// AddResource mocks base method.
func (m *MockStack) AddResource(res Resource) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddResource", res)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddResource indicates an expected call of AddResource.
func (mr *MockStackMockRecorder) AddResource(res interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddResource", reflect.TypeOf((*MockStack)(nil).AddResource), res)
}

// GetResource mocks base method.
func (m *MockStack) GetResource(id string, res Resource) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResource", id, res)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetResource indicates an expected call of GetResource.
func (mr *MockStackMockRecorder) GetResource(id, res interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResource", reflect.TypeOf((*MockStack)(nil).GetResource), id, res)
}

// ListResources mocks base method.
func (m *MockStack) ListResources(pResourceSlice interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListResources", pResourceSlice)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListResources indicates an expected call of ListResources.
func (mr *MockStackMockRecorder) ListResources(pResourceSlice interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResources", reflect.TypeOf((*MockStack)(nil).ListResources), pResourceSlice)
}

// StackID mocks base method.
func (m *MockStack) StackID() StackID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StackID")
	ret0, _ := ret[0].(StackID)
	return ret0
}

// StackID indicates an expected call of StackID.
func (mr *MockStackMockRecorder) StackID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StackID", reflect.TypeOf((*MockStack)(nil).StackID))
}

// TopologicalTraversal mocks base method.
func (m *MockStack) TopologicalTraversal(visitor ResourceVisitor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TopologicalTraversal", visitor)
	ret0, _ := ret[0].(error)
	return ret0
}

// TopologicalTraversal indicates an expected call of TopologicalTraversal.
func (mr *MockStackMockRecorder) TopologicalTraversal(visitor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TopologicalTraversal", reflect.TypeOf((*MockStack)(nil).TopologicalTraversal), visitor)
}
